class CucumberSettings:
    def __init__(self, sensor_data):
        """
        Initialize the CucumberSettings class with sensor data and the thresholds.
        """
        self.sensor_data = sensor_data
        self.thresholds = {
            "temperature": {"max": 29, "min": 24},
            "humidity": {"max": 80, "min": 60},
            "moisture": {"max": 80, "min": 70},
            "light_intensity": {"max": 25000, "min": 15000},
        }

    def check_conditions(self):
        """
        Check if any of the sensor values exceed the defined thresholds.
        Alerts the user if a threshold is crossed.
        """
        alerts = []
        
        # Check temperature thresholds
        if self.sensor_data["temperature"] > self.thresholds["temperature"]["max"]:
            alerts.append(f"Warning: Temperature too high! ({self.sensor_data['temperature']}C)")
        elif self.sensor_data["temperature"] < self.thresholds["temperature"]["min"]:
            alerts.append(f"Warning: Temperature too low! ({self.sensor_data['temperature']}C)")
        
        # Check humidity thresholds
        if self.sensor_data["humidity"] > self.thresholds["humidity"]["max"]:
            alerts.append(f"Warning: Humidity too high! ({self.sensor_data['humidity']}%)")
        elif self.sensor_data["humidity"] < self.thresholds["humidity"]["min"]:
            alerts.append(f"Warning: Humidity too low! ({self.sensor_data['humidity']}%)")
        
        # Check soil moisture thresholds
        if self.sensor_data["moisture"] > self.thresholds["moisture"]["max"]:
            alerts.append(f"Warning: Soil moisture too high! ({self.sensor_data['moisture']}%)")
        elif self.sensor_data["moisture"] < self.thresholds["moisture"]["min"]:
            alerts.append(f"Warning: Soil moisture too low! ({self.sensor_data['moisture']}%)")
        
        # Check light intensity thresholds
        if self.sensor_data["light_intensity"] > self.thresholds["light_intensity"]["max"]:
            alerts.append(f"Warning: Light intensity too high! ({self.sensor_data['light_intensity']} lux)")
        elif self.sensor_data["light_intensity"] < self.thresholds["light_intensity"]["min"]:
            alerts.append(f"Warning: Light intensity too low! ({self.sensor_data['light_intensity']} lux)")

        return alerts

# Example of how to integrate the CucumberSettings module in the existing system:
def integrate_cucumber_settings(sensor_data):
    """
    This function integrates CucumberSettings to check environmental conditions.
    It returns any alerts generated by the plugin.
    """
    cucumber_settings = CucumberSettings(sensor_data)
    alerts = cucumber_settings.check_conditions()
    return alerts

# Simulate checking the conditions with sample sensor data
sample_sensor_data = {
    "temperature": 30.0,   # Above threshold
    "humidity": 75.0,      # Within threshold
    "moisture": 85.0,      # Above threshold
    "light_intensity": 20000  # Within threshold
}

# Running the cucumber settings check to see if it triggers any alerts
alerts = integrate_cucumber_settings(sample_sensor_data)
for alert in alerts:
    print(alert)  # Replace this with GUI-based alerts if needed
